name: Lint & Build & Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    name: Lint, build and unit tests
    runs-on: ubuntu-latest
    outputs:
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}
      plugin-version: ${{ steps.metadata.outputs.plugin-version }}
      has-e2e: ${{ steps.check-for-e2e.outputs.has-e2e }}
      has-backend: ${{ steps.check-for-backend.outputs.has-backend }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable --prefer-offline

      - name: Check types
        run: yarn typecheck
      - name: Lint
        run: yarn lint
      - name: Unit tests
        run: yarn test:ci
      - name: Build frontend
        run: yarn build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go environment
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: buildAll

      - name: Check for E2E
        id: check-for-e2e
        run: |
          if [ -f "playwright.config.ts" ]
          then
            echo "has-e2e=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r

      - name: Check plugin.json
        run: |
          docker run --pull=always \
            -v $PWD/${{ steps.metadata.outputs.archive }}:/archive.zip \
            grafana/plugin-validator-cli -analyzer=metadatavalid /archive.zip

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
          path: ${{ steps.metadata.outputs.plugin-id }}
          retention-days: 5

  resolve-versions:
    name: Resolve e2e images
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: build-and-test
    if: ${{ needs.build-and-test.outputs.has-e2e == 'true' }}
    outputs:
      matrix: ${{ steps.resolve-versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Resolve Grafana E2E versions
        id: resolve-versions
        uses: grafana/plugin-actions/e2e-version@main
        with:
          skip-grafana-dev-image: true
          limit: 5

  playwright-tests:
    env:
      GRAFANA_URL: http://localhost:2999
      COGNITE_HOST: api.cognitedata.com
      AZURE_CLIENT_ID: 1b90ede3-271e-401b-81a0-a4d52bea3273
      AZURE_TENANT: 48d5043c-cf70-4c49-881c-c638f5796997
      COGNITE_PROJECT: publicdata

    needs: [resolve-versions, build-and-test]
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        GRAFANA_IMAGE: ${{fromJson(needs.resolve-versions.outputs.matrix)}}
    name: e2e test ${{ matrix.GRAFANA_IMAGE.name }}@${{ matrix.GRAFANA_IMAGE.VERSION }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download plugin
        uses: actions/download-artifact@v4
        with:
          path: dist
          name: ${{ needs.build-and-test.outputs.plugin-id }}-${{ needs.build-and-test.outputs.plugin-version }}

      - name: Execute permissions on binary
        if: needs.build-and-test.outputs.has-backend == 'true'
        run: |
          chmod +x ./dist/gpx_*

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dev dependencies
        run: yarn install --immutable --prefer-offline

      - name: Start Grafana
        run: |
          docker compose pull
          ANONYMOUS_AUTH_ENABLED=false DEVELOPMENT=false GRAFANA_VERSION=${{ matrix.GRAFANA_IMAGE.VERSION }} GRAFANA_IMAGE=${{ matrix.GRAFANA_IMAGE.NAME }} docker compose up -d

      - name: Wait for grafana server
        uses: grafana/plugin-actions/wait-for-grafana@main
        with:
          url: ${{ env.GRAFANA_URL }}/login

      - name: Install Playwright Browsers
        run: npm exec playwright install chromium --with-deps

      - name: Run Playwright tests
        id: run-tests
        run: yarn e2e

      - name: Docker logs
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        run: |
          docker logs cognitedata-datasource >& grafana-server.log

      - name: Stop grafana docker
        run: docker compose down

      - name: Upload server log
        uses: actions/upload-artifact@v4
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        with:
          name: ${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}-server-log
          path: grafana-server.log
          retention-days: 5

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
